{"version":3,"file":"scheme-DeaA28vt.js","sources":["../NodeLib/node_modules/@codemirror/legacy-modes/mode/scheme.js"],"sourcesContent":["var BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\",\n    SYMBOL = \"symbol\", ATOM = \"atom\", NUMBER = \"number\", BRACKET = \"bracket\";\nvar INDENT_WORD_SKIP = 2;\n\nfunction makeKeywords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = makeKeywords(\"Î» case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\nvar indentKeys = makeKeywords(\"define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless\");\n\nfunction stateStack(indent, type, prev) { // represents a state stack object\n  this.indent = indent;\n  this.type = type;\n  this.prev = prev;\n}\n\nfunction pushStack(state, indent, type) {\n  state.indentStack = new stateStack(indent, type, state.indentStack);\n}\n\nfunction popStack(state) {\n  state.indentStack = state.indentStack.prev;\n}\n\nvar binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\nvar octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\nvar hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\nvar decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\nfunction isBinaryNumber (stream) {\n  return stream.match(binaryMatcher);\n}\n\nfunction isOctalNumber (stream) {\n  return stream.match(octalMatcher);\n}\n\nfunction isDecimalNumber (stream, backup) {\n  if (backup === true) {\n    stream.backUp(1);\n  }\n  return stream.match(decimalMatcher);\n}\n\nfunction isHexNumber (stream) {\n  return stream.match(hexMatcher);\n}\n\nfunction processEscapedSequence(stream, options) {\n  var next, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next == options.token && !escaped) {\n      options.state.mode = false;\n      break;\n    }\n    escaped = !escaped && next == \"\\\\\";\n  }\n}\n\nexport const scheme = {\n  name: \"scheme\",\n  startState: function () {\n    return {\n      indentStack: null,\n      indentation: 0,\n      mode: false,\n      sExprComment: false,\n      sExprQuote: false\n    };\n  },\n\n  token: function (stream, state) {\n    if (state.indentStack == null && stream.sol()) {\n      // update indentation, but only if indentStack is empty\n      state.indentation = stream.indentation();\n    }\n\n    // skip spaces\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var returnType = null;\n\n    switch(state.mode){\n    case \"string\": // multi-line string parsing mode\n      processEscapedSequence(stream, {\n        token: \"\\\"\",\n        state: state\n      });\n      returnType = STRING; // continue on in scheme-string mode\n      break;\n    case \"symbol\": // escape symbol\n      processEscapedSequence(stream, {\n        token: \"|\",\n        state: state\n      });\n      returnType = SYMBOL; // continue on in scheme-symbol mode\n      break;\n    case \"comment\": // comment parsing mode\n      var next, maybeEnd = false;\n      while ((next = stream.next()) != null) {\n        if (next == \"#\" && maybeEnd) {\n\n          state.mode = false;\n          break;\n        }\n        maybeEnd = (next == \"|\");\n      }\n      returnType = COMMENT;\n      break;\n    case \"s-expr-comment\": // s-expr commenting mode\n      state.mode = false;\n      if(stream.peek() == \"(\" || stream.peek() == \"[\"){\n        // actually start scheme s-expr commenting mode\n        state.sExprComment = 0;\n      }else{\n        // if not we just comment the entire of the next token\n        stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n        returnType = COMMENT;\n        break;\n      }\n    default: // default parsing mode\n      var ch = stream.next();\n\n      if (ch == \"\\\"\") {\n        state.mode = \"string\";\n        returnType = STRING;\n\n      } else if (ch == \"'\") {\n        if (stream.peek() == \"(\" || stream.peek() == \"[\"){\n          if (typeof state.sExprQuote != \"number\") {\n            state.sExprQuote = 0;\n          } // else already in a quoted expression\n          returnType = ATOM;\n        } else {\n          stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n          returnType = ATOM;\n        }\n      } else if (ch == '|') {\n        state.mode = \"symbol\";\n        returnType = SYMBOL;\n      } else if (ch == '#') {\n        if (stream.eat(\"|\")) {                    // Multi-line comment\n          state.mode = \"comment\"; // toggle to comment mode\n          returnType = COMMENT;\n        } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)\n          returnType = ATOM;\n        } else if (stream.eat(';')) {                // S-Expr comment\n          state.mode = \"s-expr-comment\";\n          returnType = COMMENT;\n        } else {\n          var numTest = null, hasExactness = false, hasRadix = true;\n          if (stream.eat(/[ei]/i)) {\n            hasExactness = true;\n          } else {\n            stream.backUp(1);       // must be radix specifier\n          }\n          if (stream.match(/^#b/i)) {\n            numTest = isBinaryNumber;\n          } else if (stream.match(/^#o/i)) {\n            numTest = isOctalNumber;\n          } else if (stream.match(/^#x/i)) {\n            numTest = isHexNumber;\n          } else if (stream.match(/^#d/i)) {\n            numTest = isDecimalNumber;\n          } else if (stream.match(/^[-+0-9.]/, false)) {\n            hasRadix = false;\n            numTest = isDecimalNumber;\n            // re-consume the initial # if all matches failed\n          } else if (!hasExactness) {\n            stream.eat('#');\n          }\n          if (numTest != null) {\n            if (hasRadix && !hasExactness) {\n              // consume optional exactness after radix\n              stream.match(/^#[ei]/i);\n            }\n            if (numTest(stream))\n              returnType = NUMBER;\n          }\n        }\n      } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal\n        returnType = NUMBER;\n      } else if (ch == \";\") { // comment\n        stream.skipToEnd(); // rest of the line is a comment\n        returnType = COMMENT;\n      } else if (ch == \"(\" || ch == \"[\") {\n        var keyWord = ''; var indentTemp = stream.column(), letter;\n        /**\n           Either\n           (indent-word ..\n           (non-indent-word ..\n           (;something else, bracket, etc.\n        */\n\n        while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n          keyWord += letter;\n        }\n\n        if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word\n\n          pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n        } else { // non-indent word\n          // we continue eating the spaces\n          stream.eatSpace();\n          if (stream.eol() || stream.peek() == \";\") {\n            // nothing significant after\n            // we restart indentation 1 space after\n            pushStack(state, indentTemp + 1, ch);\n          } else {\n            pushStack(state, indentTemp + stream.current().length, ch); // else we match\n          }\n        }\n        stream.backUp(stream.current().length - 1); // undo all the eating\n\n        if(typeof state.sExprComment == \"number\") state.sExprComment++;\n        if(typeof state.sExprQuote == \"number\") state.sExprQuote++;\n\n        returnType = BRACKET;\n      } else if (ch == \")\" || ch == \"]\") {\n        returnType = BRACKET;\n        if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n          popStack(state);\n\n          if(typeof state.sExprComment == \"number\"){\n            if(--state.sExprComment == 0){\n              returnType = COMMENT; // final closing bracket\n              state.sExprComment = false; // turn off s-expr commenting mode\n            }\n          }\n          if(typeof state.sExprQuote == \"number\"){\n            if(--state.sExprQuote == 0){\n              returnType = ATOM; // final closing bracket\n              state.sExprQuote = false; // turn off s-expr quote mode\n            }\n          }\n        }\n      } else {\n        stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n        if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n          returnType = BUILTIN;\n        } else returnType = \"variable\";\n      }\n    }\n    return (typeof state.sExprComment == \"number\") ? COMMENT : ((typeof state.sExprQuote == \"number\") ? ATOM : returnType);\n  },\n\n  indent: function (state) {\n    if (state.indentStack == null) return state.indentation;\n    return state.indentStack.indent;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \";;\"}\n  }\n};\n"],"names":[],"mappings":"AAAA,IAAI,OAAO,GAAG,SAAS,EAAE,OAAO,GAAG,SAAS,EAAE,MAAM,GAAG,QAAQ;AAC/D,IAAI,MAAM,GAAG,QAAQ,EAAE,IAAI,GAAG,MAAM,EAAE,MAAM,GAAG,QAAQ,EAAE,OAAO,GAAG,SAAS,CAAC;AAC7E,IAAI,gBAAgB,GAAG,CAAC,CAAC;AACzB;AACA,SAAS,YAAY,CAAC,GAAG,EAAE;AAC3B,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvC,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAC9D,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA,IAAI,QAAQ,GAAG,YAAY,CAAC,opEAAopE,CAAC,CAAC;AAClrE,IAAI,UAAU,GAAG,YAAY,CAAC,0JAA0J,CAAC,CAAC;AAC1L;AACA,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE;AACxC,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,CAAC;AACD;AACA,SAAS,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE;AACxC,EAAE,KAAK,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;AACtE,CAAC;AACD;AACA,SAAS,QAAQ,CAAC,KAAK,EAAE;AACzB,EAAE,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;AAC7C,CAAC;AACD;AACA,IAAI,aAAa,GAAG,IAAI,MAAM,CAAC,iMAAiM,CAAC,CAAC;AAClO,IAAI,YAAY,GAAG,IAAI,MAAM,CAAC,6MAA6M,CAAC,CAAC;AAC7O,IAAI,UAAU,GAAG,IAAI,MAAM,CAAC,qOAAqO,CAAC,CAAC;AACnQ,IAAI,cAAc,GAAG,IAAI,MAAM,CAAC,8gBAA8gB,CAAC,CAAC;AAChjB;AACA,SAAS,cAAc,EAAE,MAAM,EAAE;AACjC,EAAE,OAAO,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACrC,CAAC;AACD;AACA,SAAS,aAAa,EAAE,MAAM,EAAE;AAChC,EAAE,OAAO,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;AACpC,CAAC;AACD;AACA,SAAS,eAAe,EAAE,MAAM,EAAE,MAAM,EAAE;AAC1C,EAAE,IAAI,MAAM,KAAK,IAAI,EAAE;AACvB,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACrB,GAAG;AACH,EAAE,OAAO,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AACtC,CAAC;AACD;AACA,SAAS,WAAW,EAAE,MAAM,EAAE;AAC9B,EAAE,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAClC,CAAC;AACD;AACA,SAAS,sBAAsB,CAAC,MAAM,EAAE,OAAO,EAAE;AACjD,EAAE,IAAI,IAAI,EAAE,OAAO,GAAG,KAAK,CAAC;AAC5B,EAAE,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;AACzC,IAAI,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;AAC3C,MAAM,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;AACjC,MAAM,MAAM;AACZ,KAAK;AACL,IAAI,OAAO,GAAG,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,GAAG;AACH,CAAC;AACD;AACY,MAAC,MAAM,GAAG;AACtB,EAAE,IAAI,EAAE,QAAQ;AAChB,EAAE,UAAU,EAAE,YAAY;AAC1B,IAAI,OAAO;AACX,MAAM,WAAW,EAAE,IAAI;AACvB,MAAM,WAAW,EAAE,CAAC;AACpB,MAAM,IAAI,EAAE,KAAK;AACjB,MAAM,YAAY,EAAE,KAAK;AACzB,MAAM,UAAU,EAAE,KAAK;AACvB,KAAK,CAAC;AACN,GAAG;AACH;AACA,EAAE,KAAK,EAAE,UAAU,MAAM,EAAE,KAAK,EAAE;AAClC,IAAI,IAAI,KAAK,CAAC,WAAW,IAAI,IAAI,IAAI,MAAM,CAAC,GAAG,EAAE,EAAE;AACnD;AACA,MAAM,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;AAC/C,KAAK;AACL;AACA;AACA,IAAI,IAAI,MAAM,CAAC,QAAQ,EAAE,EAAE;AAC3B,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC;AAC1B;AACA,IAAI,OAAO,KAAK,CAAC,IAAI;AACrB,IAAI,KAAK,QAAQ;AACjB,MAAM,sBAAsB,CAAC,MAAM,EAAE;AACrC,QAAQ,KAAK,EAAE,IAAI;AACnB,QAAQ,KAAK,EAAE,KAAK;AACpB,OAAO,CAAC,CAAC;AACT,MAAM,UAAU,GAAG,MAAM,CAAC;AAC1B,MAAM,MAAM;AACZ,IAAI,KAAK,QAAQ;AACjB,MAAM,sBAAsB,CAAC,MAAM,EAAE;AACrC,QAAQ,KAAK,EAAE,GAAG;AAClB,QAAQ,KAAK,EAAE,KAAK;AACpB,OAAO,CAAC,CAAC;AACT,MAAM,UAAU,GAAG,MAAM,CAAC;AAC1B,MAAM,MAAM;AACZ,IAAI,KAAK,SAAS;AAClB,MAAM,IAAI,IAAI,EAAE,QAAQ,GAAG,KAAK,CAAC;AACjC,MAAM,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;AAC7C,QAAQ,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,EAAE;AACrC;AACA,UAAU,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;AAC7B,UAAU,MAAM;AAChB,SAAS;AACT,QAAQ,QAAQ,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC;AACjC,OAAO;AACP,MAAM,UAAU,GAAG,OAAO,CAAC;AAC3B,MAAM,MAAM;AACZ,IAAI,KAAK,gBAAgB;AACzB,MAAM,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;AACzB,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC;AACtD;AACA,QAAQ,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;AAC/B,OAAO,KAAI;AACX;AACA,QAAQ,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;AACzC,QAAQ,UAAU,GAAG,OAAO,CAAC;AAC7B,QAAQ,MAAM;AACd,OAAO;AACP,IAAI;AACJ,MAAM,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AAC7B;AACA,MAAM,IAAI,EAAE,IAAI,IAAI,EAAE;AACtB,QAAQ,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC9B,QAAQ,UAAU,GAAG,MAAM,CAAC;AAC5B;AACA,OAAO,MAAM,IAAI,EAAE,IAAI,GAAG,EAAE;AAC5B,QAAQ,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC;AACzD,UAAU,IAAI,OAAO,KAAK,CAAC,UAAU,IAAI,QAAQ,EAAE;AACnD,YAAY,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;AACjC,WAAW;AACX,UAAU,UAAU,GAAG,IAAI,CAAC;AAC5B,SAAS,MAAM;AACf,UAAU,MAAM,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC;AACxD,UAAU,UAAU,GAAG,IAAI,CAAC;AAC5B,SAAS;AACT,OAAO,MAAM,IAAI,EAAE,IAAI,GAAG,EAAE;AAC5B,QAAQ,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC9B,QAAQ,UAAU,GAAG,MAAM,CAAC;AAC5B,OAAO,MAAM,IAAI,EAAE,IAAI,GAAG,EAAE;AAC5B,QAAQ,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AAC7B,UAAU,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC;AACjC,UAAU,UAAU,GAAG,OAAO,CAAC;AAC/B,SAAS,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AACxC,UAAU,UAAU,GAAG,IAAI,CAAC;AAC5B,SAAS,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACpC,UAAU,KAAK,CAAC,IAAI,GAAG,gBAAgB,CAAC;AACxC,UAAU,UAAU,GAAG,OAAO,CAAC;AAC/B,SAAS,MAAM;AACf,UAAU,IAAI,OAAO,GAAG,IAAI,EAAE,YAAY,GAAG,KAAK,EAAE,QAAQ,GAAG,IAAI,CAAC;AACpE,UAAU,IAAI,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AACnC,YAAY,YAAY,GAAG,IAAI,CAAC;AAChC,WAAW,MAAM;AACjB,YAAY,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7B,WAAW;AACX,UAAU,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AACpC,YAAY,OAAO,GAAG,cAAc,CAAC;AACrC,WAAW,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AAC3C,YAAY,OAAO,GAAG,aAAa,CAAC;AACpC,WAAW,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AAC3C,YAAY,OAAO,GAAG,WAAW,CAAC;AAClC,WAAW,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AAC3C,YAAY,OAAO,GAAG,eAAe,CAAC;AACtC,WAAW,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE;AACvD,YAAY,QAAQ,GAAG,KAAK,CAAC;AAC7B,YAAY,OAAO,GAAG,eAAe,CAAC;AACtC;AACA,WAAW,MAAM,IAAI,CAAC,YAAY,EAAE;AACpC,YAAY,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,WAAW;AACX,UAAU,IAAI,OAAO,IAAI,IAAI,EAAE;AAC/B,YAAY,IAAI,QAAQ,IAAI,CAAC,YAAY,EAAE;AAC3C;AACA,cAAc,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACtC,aAAa;AACb,YAAY,IAAI,OAAO,CAAC,MAAM,CAAC;AAC/B,cAAc,UAAU,GAAG,MAAM,CAAC;AAClC,WAAW;AACX,SAAS;AACT,OAAO,MAAM,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;AACxE,QAAQ,UAAU,GAAG,MAAM,CAAC;AAC5B,OAAO,MAAM,IAAI,EAAE,IAAI,GAAG,EAAE;AAC5B,QAAQ,MAAM,CAAC,SAAS,EAAE,CAAC;AAC3B,QAAQ,UAAU,GAAG,OAAO,CAAC;AAC7B,OAAO,MAAM,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,EAAE;AACzC,QAAQ,IAAI,OAAO,GAAG,EAAE,CAAC,CAAC,IAAI,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK,IAAI,EAAE;AACjE,UAAU,OAAO,IAAI,MAAM,CAAC;AAC5B,SAAS;AACT;AACA,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,UAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE;AAC5E;AACA,UAAU,SAAS,CAAC,KAAK,EAAE,UAAU,GAAG,gBAAgB,EAAE,EAAE,CAAC,CAAC;AAC9D,SAAS,MAAM;AACf;AACA,UAAU,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC5B,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE;AACpD;AACA;AACA,YAAY,SAAS,CAAC,KAAK,EAAE,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;AACjD,WAAW,MAAM;AACjB,YAAY,SAAS,CAAC,KAAK,EAAE,UAAU,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACvE,WAAW;AACX,SAAS;AACT,QAAQ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACnD;AACA,QAAQ,GAAG,OAAO,KAAK,CAAC,YAAY,IAAI,QAAQ,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC;AACvE,QAAQ,GAAG,OAAO,KAAK,CAAC,UAAU,IAAI,QAAQ,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC;AACnE;AACA,QAAQ,UAAU,GAAG,OAAO,CAAC;AAC7B,OAAO,MAAM,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,EAAE;AACzC,QAAQ,UAAU,GAAG,OAAO,CAAC;AAC7B,QAAQ,IAAI,KAAK,CAAC,WAAW,IAAI,IAAI,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE;AAC5F,UAAU,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1B;AACA,UAAU,GAAG,OAAO,KAAK,CAAC,YAAY,IAAI,QAAQ,CAAC;AACnD,YAAY,GAAG,EAAE,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC;AACzC,cAAc,UAAU,GAAG,OAAO,CAAC;AACnC,cAAc,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;AACzC,aAAa;AACb,WAAW;AACX,UAAU,GAAG,OAAO,KAAK,CAAC,UAAU,IAAI,QAAQ,CAAC;AACjD,YAAY,GAAG,EAAE,KAAK,CAAC,UAAU,IAAI,CAAC,CAAC;AACvC,cAAc,UAAU,GAAG,IAAI,CAAC;AAChC,cAAc,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;AACvC,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,MAAM,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC;AACtD;AACA,QAAQ,IAAI,QAAQ,IAAI,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;AACzE,UAAU,UAAU,GAAG,OAAO,CAAC;AAC/B,SAAS,MAAM,UAAU,GAAG,UAAU,CAAC;AACvC,OAAO;AACP,KAAK;AACL,IAAI,OAAO,CAAC,OAAO,KAAK,CAAC,YAAY,IAAI,QAAQ,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,CAAC,UAAU,IAAI,QAAQ,IAAI,IAAI,GAAG,UAAU,CAAC,CAAC;AAC3H,GAAG;AACH;AACA,EAAE,MAAM,EAAE,UAAU,KAAK,EAAE;AAC3B,IAAI,IAAI,KAAK,CAAC,WAAW,IAAI,IAAI,EAAE,OAAO,KAAK,CAAC,WAAW,CAAC;AAC5D,IAAI,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC;AACpC,GAAG;AACH;AACA,EAAE,YAAY,EAAE;AAChB,IAAI,aAAa,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACnD,IAAI,aAAa,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;AAC/B,GAAG;AACH;;;;","x_google_ignoreList":[0]}